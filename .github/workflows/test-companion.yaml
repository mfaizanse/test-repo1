name: "Companion Test on Kyma"
run-name: "Companion Test on Kyma"

# Required repository secrets:
# - AICORE_SECRET
# - COMPANION_CONFIGMAP

on:
  push:
    branches:
      - main

# global env variables.
env:
  DOCKER_TIMEOUT: 30
  KYMA_VERSION: "2.20.5" # Required Kyma version.
  K3D_VERSION: "v5.7.2" # Required K3d version.
  REPOSITORY_FULL_NAME: "${{ github.repository }}" # <owner>/<repository-name>.
  GITHUB_EVENT_ACTION: "${{ github.event.action }}"
  IMAGE_NAME: "europe-docker.pkg.dev/kyma-project/prod/kyma-companion:main"

jobs:
  test-companion:
    name: Run Companion tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"
          repository: "kyma-project/kyma-companion"

      - name: Install Kyma CLI
        id: install-kyma-cli
        run: |
          mkdir -p bin
          curl -L "https://github.com/kyma-project/cli/releases/download/${KYMA_VERSION}/kyma_$(uname -s)_$(uname -m).tar.gz" | tar -zxvf - -C bin kyma && mv bin/kyma bin/kyma@v2
          echo "::set-output name=version::$(bin/kyma@v2 version)"
        continue-on-error: true

      - name: Check Kyma CLI version
        run: |
          kyma_cli_version=$(echo "${{ steps.install-kyma-cli.outputs.version }}" | cut -d ":" -f 2 | xargs)
          if [ "$kyma_cli_version" != "${KYMA_VERSION}" ]; then
            echo "Kyma CLI version is not correct. Expected: ${KYMA_VERSION}, got: $kyma_cli_version"
            exit 1
          fi
          echo "Kyma CLI version is correct: $kyma_cli_version"

      - name: Install Kubernetes CLI
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          ./kubectl version --client

      - name: Install K3d
        id: install-k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=${K3D_VERSION} bash
          echo "::set-output name=version::$(k3d --version)"
        continue-on-error: true

      - name: Check K3d version
        run: |
          k3d_version=$(echo "${{ steps.install-k3d.outputs.version }}" | cut -d " " -f 3 | xargs)
          if [ "$k3d_version" != "${K3D_VERSION}" ]; then
            echo "K3d version is not correct. Expected: ${K3D_VERSION}, got: $k3d_version"
            exit 1
          fi
          echo "K3d version is correct: $k3d_version"

      - name: Deploy Kyma
        run: |
          echo "::group::Kyma - Provision"
          bin/kyma@v2 provision k3d --ci --non-interactive -p 9080:80@loadbalancer -p 9443:443@loadbalancer
          echo "::endgroup::"

          echo "::group::Kyma - Deploy"
          bin/kyma@v2 alpha deploy --ci --non-interactive
          echo "::endgroup::"

      - name: Verify Kyma deployment
        run: |
          echo "::group::Kyma - Context"
          context_name=$(./kubectl config current-context)
          if [ "$context_name" != "k3d-kyma" ]; then
            echo "Kyma context is not correct. Expected: k3d-kyma, got: $context_name"
            exit 1
          fi
          echo "Kyma context is correct"
          echo "::endgroup::"

          echo "::group::Kyma - Verify Kyma deployment"
          kyma_status=$(./kubectl get kyma -A -ojson | jq -r '[(.items[].status.state)] | .[0]')
          echo "::debug::Kyma status: $kyma_status"
          if [ "$kyma_status" != "Ready" ]; then
            echo "Kyma is not Ready. Expected: Ready, got: $kyma_status"
            exit 1
          fi
          echo "Kyma is Ready"
          echo "::endgroup::"

      - name: Companion Deploy - Create namespace
        run: |
          ./kubectl apply -f scripts/k8s/companion-namespace.yaml

      - name: Companion Deploy - Create secret on Kyma
        run: |
          echo "${{ secrets.AICORE_SECRET }}" | base64 -d > scripts/k8s/aicore-secret.yaml
          ./kubectl apply -f scripts/k8s/aicore-secret.yaml
          rm -f scripts/k8s/aicore-secret.yaml

      - name: Companion Deploy - Create configmap on Kyma
        run: |
          echo "${{ secrets.COMPANION_CONFIGMAP }}" | base64 -d > scripts/k8s/companion-configmap.yaml
          ./kubectl apply -f scripts/k8s/companion-configmap.yaml
          rm -f scripts/k8s/companion-configmap.yaml

      - name: Companion Deploy - Update image name in Deployment
        working-directory:
        run: |
          sed -i "s|example.com/ai-backend:stable|${{env.IMAGE_NAME}}|g" scripts/k8s/companion-deployment.yaml

      - name: Companion Deploy - Create Backend and NodePort service
        if: success() # Only run if previous steps succeeded
        run: |
          ./kubectl apply -f scripts/k8s/companion-deployment.yaml

      - name: Companion Deploy - Wait for deployment
        id: companion-deploy-wait
        run: scripts/shell/deploy-wait-for-deployment.sh $DOCKER_TIMEOUT

      - name: Test companion reachability
        run: |
          curl http://localhost:32000/readyz

      - name: Extract Python version
        id: python-version
        run: ./scripts/shell/extract-python-version.sh

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run evaluation tests
        env:
          EVALUATION_TESTS_ENV_FILE: ${{ secrets.EVALUATION_TESTS_ENV_FILE }}
        run: |
          # setup env variables.
          echo "${EVALUATION_TESTS_ENV_FILE}" | base64 -d > .env.companion.evaluation.tests
          export $(xargs < .env.companion.evaluation.tests)
          export LOG_LEVEL="DEBUG"
          export TEST_DATA_PATH="$(pwd)/tests/data"
          export COMPANION_API_URL="http://localhost:32000/chat"
          # run tests.
          poetry run python tests/blackbox/evaluation/run.py
